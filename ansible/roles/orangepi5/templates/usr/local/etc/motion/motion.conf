log_level 6
netcam_userpass admin:gig1684A
# doesn't matter if you use capture_rate smaller than camera FPS h264/h265 
# with fps=10 will probably need all previous frames to decode the current frame
# 4.3.+ uses netcam_params
# inspecting with 
# ffmpeg -v quiet -stats -rtsp_transport tcp -y -c:v  hevc_rkmpp_decoder -i rtsp://user:pass@ipcam.kitchen:554/onvif2 -f null -
# 15 is enough for 10 fps

# since jetson-nano 2G has the following decoding capabilities 18 devices at 720x480 30fps
# 4Kp60 | 2x 4Kp30 | 8x 1080p30 | 18x 720p30 (H.264/H.265)
# And considering that `movie_passthrough` is enabled. Hence only 5 rtsp streams are being decoded 
# moving netcam_params for each specific camera
# netcam_params decoder=hevc_rkmpp_decoder,rtsp_transport=tcp,framerate=30,width=640,height=360,pix_fmt=yuv420p

target_dir {{ motion_storage_dir }}

webcontrol_port 8088
# on - webcontrol only by localhost
webcontrol_localhost off
webcontrol_parms 2
webcontrol_interface 0

# on - enable access only by localhost
stream_localhost off
stream_port 8100 
#This option determines the method used for displaying images on the webcontrol page.
#0 = Full stream images are sent and scaled by the client to the webcontrol page
#1 = Substream images are sent by Motion. This saves bandwidth
#2 = Static images are sent by Motion and the page must be manually refreshed
#3 = Full stream images and motion images side by side to assist setup of detection
#4 = The source image provided by camera without privacy or other Motion overlays
stream_preview_method 2 
stream_preview_newline off
# when with 4 or more streams
# stream_preview_newline on
# 20 for stream_preview_method 3
# 40 for stream_preview_method 4
stream_preview_scale 35
stream_quality 70
stream_grey on
stream_maxrate 2
# Limit the framerate to 1 frame per second when there is no motion being detected 
# and increase it to the stream_maxrate when there is motion.
stream_motion on

noise_level 14
noise_tune off

# Picture frames must contain motion at least the specified number of frames in a row before they are detected as true motion.
# maximum recommended is 5 or bellow 10
minimum_motion_frames 2 
# 70% pixels changed intensity ignore as lighswitch change
lightswitch_percent 70

# frame is displayed in the upper right corner of the pictures
text_changes on
# font-size scale
text_scale 1

# unique name for files and pictures used as %C
text_event %Y%m%d%H%M%S%t

# Locate and draw a box around the moving object.
# Value 'preview' makes Motion only draw a box on a saved preview
# jpeg image and not on the saved movie.
locate_motion_mode  preview

# when start using motion movies
# When using a RTSP ... create movie files of the motion with the packets obtained directly from the camera.
# This option should reduce CPU usage but does increase memory requirements.
# No image processing is performed so text overlays, privacy masks etc will not be on the resulting video.

movie_output on
# saving events on specific folder for each camera named
# subfolder by month + day
movie_filename movies/cam_%$/%m_%d/%C
# (buffered) pictures from before motion was detected that will be output at motion detection
pre_capture 5
#  does not consume extra RAM creates smooth videos 2 seconds
# 20 fps = 40
post_capture 40
movie_quality 90
# max lengh of motion movie in seconds unlimited 
movie_max_time 0 
# create movie files of the motion with packets directly from the camera
movie_passthrough on

# generate as many picture (one for each motion frame `minimum_motion_frames`) 
# dont stop generating pictures even if event has not ended
# you only see the pixels that changes as a graytone image add an "m" appended to the name
# picture_output_motion on
# movie_output_motion on 
# output motion as a picture on threshold 
# picture showing where was the motion
picture_output best
picture_quality 95
# folder by camera name - subfolder by month + day
picture_filename pictures/cam_%$/%m_%d/%C
 # 1 seconds or more 0 disable
timelapse_interval 1
timelapse_mode hourly
timelapse_fps 1
# folder by camera name - subfolder by month + day
timelapse_filename movies/timelapse/cam_%$/%m_%d/%Y_%m_%d_%Hh_cam_%t_%$

# events
# #!/user/bin/python and chmod for exec
# parsing the arguments to take action for 'on_camera_lost' event  
# also passing other parameters
# %t camera id number
# %$ camera name   
# on_camera_lost /home/ubuntu/events.py on_camera_lost %t %s %N
# on_movie_end /home/ubuntu/events.py on_movie_end %t %s %N
# I could send an e-mail


# database 
database_type sqlite3
# sqlite3 cannot work with NFS system it freezes/breaks and messes up totally
database_dbname /home/ubuntu/motion.db
# 5000 ms of wait if a thread is already writing on the table
database_busy_timeout 5000 
# to assign unique id event relating picture with movie file
sql_log_picture on 
sql_log_movie on
sql_query_start {{ motion_db.sql_query_start }}
sql_query {{ motion_db.sql_query }}
sql_query_stop {{ motion_db.sql_query_stop }}

camera front_up.conf
camera front_left.conf
camera left_aisle.conf
camera right_aisle.conf
#camera broken_static.conf

			
